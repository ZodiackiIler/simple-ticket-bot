module.exports = {
  name: 'ready',
  async execute(client) {
    console.log('Bot Online!')
    console.log('Bot Dev Tenebrae');
    const oniChan = client.channels.cache.get(client.config.ticketChannel)

    function sendTicketMSG() {
      const embed = new client.discord.MessageEmbed()
        .setColor('ff0000')
        .setAuthor('–°–æ–∑–¥–∞–Ω–∏–µ –ë–∏–ª–µ—Ç–∞', client.user.avatarURL())
        .setDescription('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –°–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –±–∏–ª–µ—Ç–æ–≤\n\n–°—É—â–µ—Å—Ç–≤—É–µ—Ç —á–µ—Ç—ã—Ä–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–∞ –±–∏–ª–µ—Ç–æ–≤. –ß—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –±–∏–ª–µ—Ç,\n–Ω–∞–∂–º–∏ –ø–æ –∫–Ω–æ–ø–∫–µ\n\n–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏\n–ó–∞–ø—Ä–æ—Å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –¥–ª—è –≤—Å–µ–≥–æ, —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å —Å–µ—Ä–≤–µ—Ä–æ–º\n‚Ä¢ Apply\n‚Ä¢ Support\n‚Ä¢ General\n‚Ä¢ Complaint\n‚Ä¢ Hosting\n\n‚Ä¢ Apply\n‚Ä¢ Hosting\n‚Ä¢ Support & Questions\n‚Ä¢ General questions and topics\n\n–ó–∞ –∑–ª–æ—É–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º, –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –±–∞–Ω/–º—É—Ç')
        .setFooter(client.config.footerText, client.user.avatarURL())
      const row = new client.discord.MessageActionRow()
        .addComponents(
          new client.discord.MessageButton()
          .setCustomId('open-ticket')
          .setLabel('–°–æ–∑–¥–∞—Ç—å –±–∏–ª–µ—Ç')
          .setEmoji('üé´')
          .setStyle('PRIMARY'),
        );

      oniChan.send({
        embeds: [embed],
        components: [row]
      })
    }

    const toDelete = 1000;

    async function fetchMore(channel, limit) {
      if (!channel) {
        throw new Error(`–ö–∞–Ω–∞–ª —Å–æ–∑–¥–∞–Ω ${typeof channel}.`);
      }
      if (limit <= 100) {
        return channel.messages.fetch({
          limit
        });
      }

      let collection = [];
      let lastId = null;
      let options = {};
      let remaining = limit;

      while (remaining > 0) {
        options.limit = remaining > 100 ? 100 : remaining;
        remaining = remaining > 100 ? remaining - 100 : 0;

        if (lastId) {
          options.before = lastId;
        }

        let messages = await channel.messages.fetch(options);

        if (!messages.last()) {
          break;
        }

        collection = collection.concat(messages);
        lastId = messages.last().id;
      }
      collection.remaining = remaining;

      return collection;
    }

    const list = await fetchMore(oniChan, toDelete);

    let i = 1;

    setTimeout(() => {
      sendTicketMSG()
    }, i);
  },
};
